// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package gen

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func TestResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"retryable_errors": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"error_message_regex": schema.ListAttribute{
						ElementType: types.StringType,
						Required:    true,
					},
					"interval_seconds": schema.NumberAttribute{
						Optional: true,
						Computed: true,
					},
					"max_interval_seconds": schema.NumberAttribute{
						Optional: true,
						Computed: true,
					},
					"multiplier": schema.NumberAttribute{
						Optional: true,
						Computed: true,
					},
					"randomization_factor": schema.NumberAttribute{
						Optional: true,
						Computed: true,
					},
				},
				CustomType: RetryableErrorsType{
					ObjectType: types.ObjectType{
						AttrTypes: RetryableErrorsValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
			},
		},
	}
}

type TestModel struct {
	RetryableErrors RetryableErrorsValue `tfsdk:"retryable_errors"`
}

var _ basetypes.ObjectTypable = RetryableErrorsType{}

type RetryableErrorsType struct {
	basetypes.ObjectType
}

func (t RetryableErrorsType) Equal(o attr.Type) bool {
	other, ok := o.(RetryableErrorsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RetryableErrorsType) String() string {
	return "RetryableErrorsType"
}

func (t RetryableErrorsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	errorMessageRegexAttribute, ok := attributes["error_message_regex"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`error_message_regex is missing from object`)

		return nil, diags
	}

	errorMessageRegexVal, ok := errorMessageRegexAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`error_message_regex expected to be basetypes.ListValue, was: %T`, errorMessageRegexAttribute))
	}

	intervalSecondsAttribute, ok := attributes["interval_seconds"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval_seconds is missing from object`)

		return nil, diags
	}

	intervalSecondsVal, ok := intervalSecondsAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval_seconds expected to be basetypes.NumberValue, was: %T`, intervalSecondsAttribute))
	}

	maxIntervalSecondsAttribute, ok := attributes["max_interval_seconds"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_interval_seconds is missing from object`)

		return nil, diags
	}

	maxIntervalSecondsVal, ok := maxIntervalSecondsAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_interval_seconds expected to be basetypes.NumberValue, was: %T`, maxIntervalSecondsAttribute))
	}

	multiplierAttribute, ok := attributes["multiplier"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`multiplier is missing from object`)

		return nil, diags
	}

	multiplierVal, ok := multiplierAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`multiplier expected to be basetypes.NumberValue, was: %T`, multiplierAttribute))
	}

	randomizationFactorAttribute, ok := attributes["randomization_factor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`randomization_factor is missing from object`)

		return nil, diags
	}

	randomizationFactorVal, ok := randomizationFactorAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`randomization_factor expected to be basetypes.NumberValue, was: %T`, randomizationFactorAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RetryableErrorsValue{
		ErrorMessageRegex:   errorMessageRegexVal,
		IntervalSeconds:     intervalSecondsVal,
		MaxIntervalSeconds:  maxIntervalSecondsVal,
		Multiplier:          multiplierVal,
		RandomizationFactor: randomizationFactorVal,
		state:               attr.ValueStateKnown,
	}, diags
}

func NewRetryableErrorsValueNull() RetryableErrorsValue {
	return RetryableErrorsValue{
		state: attr.ValueStateNull,
	}
}

func NewRetryableErrorsValueUnknown() RetryableErrorsValue {
	return RetryableErrorsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRetryableErrorsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RetryableErrorsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RetryableErrorsValue Attribute Value",
				"While creating a RetryableErrorsValue value, a missing attribute value was detected. "+
					"A RetryableErrorsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RetryableErrorsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RetryableErrorsValue Attribute Type",
				"While creating a RetryableErrorsValue value, an invalid attribute value was detected. "+
					"A RetryableErrorsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RetryableErrorsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RetryableErrorsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RetryableErrorsValue Attribute Value",
				"While creating a RetryableErrorsValue value, an extra attribute value was detected. "+
					"A RetryableErrorsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RetryableErrorsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRetryableErrorsValueUnknown(), diags
	}

	errorMessageRegexAttribute, ok := attributes["error_message_regex"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`error_message_regex is missing from object`)

		return NewRetryableErrorsValueUnknown(), diags
	}

	errorMessageRegexVal, ok := errorMessageRegexAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`error_message_regex expected to be basetypes.ListValue, was: %T`, errorMessageRegexAttribute))
	}

	intervalSecondsAttribute, ok := attributes["interval_seconds"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval_seconds is missing from object`)

		return NewRetryableErrorsValueUnknown(), diags
	}

	intervalSecondsVal, ok := intervalSecondsAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval_seconds expected to be basetypes.NumberValue, was: %T`, intervalSecondsAttribute))
	}

	maxIntervalSecondsAttribute, ok := attributes["max_interval_seconds"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_interval_seconds is missing from object`)

		return NewRetryableErrorsValueUnknown(), diags
	}

	maxIntervalSecondsVal, ok := maxIntervalSecondsAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_interval_seconds expected to be basetypes.NumberValue, was: %T`, maxIntervalSecondsAttribute))
	}

	multiplierAttribute, ok := attributes["multiplier"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`multiplier is missing from object`)

		return NewRetryableErrorsValueUnknown(), diags
	}

	multiplierVal, ok := multiplierAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`multiplier expected to be basetypes.NumberValue, was: %T`, multiplierAttribute))
	}

	randomizationFactorAttribute, ok := attributes["randomization_factor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`randomization_factor is missing from object`)

		return NewRetryableErrorsValueUnknown(), diags
	}

	randomizationFactorVal, ok := randomizationFactorAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`randomization_factor expected to be basetypes.NumberValue, was: %T`, randomizationFactorAttribute))
	}

	if diags.HasError() {
		return NewRetryableErrorsValueUnknown(), diags
	}

	return RetryableErrorsValue{
		ErrorMessageRegex:   errorMessageRegexVal,
		IntervalSeconds:     intervalSecondsVal,
		MaxIntervalSeconds:  maxIntervalSecondsVal,
		Multiplier:          multiplierVal,
		RandomizationFactor: randomizationFactorVal,
		state:               attr.ValueStateKnown,
	}, diags
}

func NewRetryableErrorsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RetryableErrorsValue {
	object, diags := NewRetryableErrorsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRetryableErrorsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RetryableErrorsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRetryableErrorsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRetryableErrorsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRetryableErrorsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRetryableErrorsValueMust(RetryableErrorsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RetryableErrorsType) ValueType(ctx context.Context) attr.Value {
	return RetryableErrorsValue{}
}

var _ basetypes.ObjectValuable = RetryableErrorsValue{}

type RetryableErrorsValue struct {
	ErrorMessageRegex   basetypes.ListValue   `tfsdk:"error_message_regex"`
	IntervalSeconds     basetypes.NumberValue `tfsdk:"interval_seconds"`
	MaxIntervalSeconds  basetypes.NumberValue `tfsdk:"max_interval_seconds"`
	Multiplier          basetypes.NumberValue `tfsdk:"multiplier"`
	RandomizationFactor basetypes.NumberValue `tfsdk:"randomization_factor"`
	state               attr.ValueState
}

func (v RetryableErrorsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["error_message_regex"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["interval_seconds"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["max_interval_seconds"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["multiplier"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["randomization_factor"] = basetypes.NumberType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.ErrorMessageRegex.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["error_message_regex"] = val

		val, err = v.IntervalSeconds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interval_seconds"] = val

		val, err = v.MaxIntervalSeconds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_interval_seconds"] = val

		val, err = v.Multiplier.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["multiplier"] = val

		val, err = v.RandomizationFactor.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["randomization_factor"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RetryableErrorsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RetryableErrorsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RetryableErrorsValue) String() string {
	return "RetryableErrorsValue"
}

func (v RetryableErrorsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	errorMessageRegexVal, d := types.ListValue(types.StringType, v.ErrorMessageRegex.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"error_message_regex": basetypes.ListType{
				ElemType: types.StringType,
			},
			"interval_seconds":     basetypes.NumberType{},
			"max_interval_seconds": basetypes.NumberType{},
			"multiplier":           basetypes.NumberType{},
			"randomization_factor": basetypes.NumberType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"error_message_regex": basetypes.ListType{
			ElemType: types.StringType,
		},
		"interval_seconds":     basetypes.NumberType{},
		"max_interval_seconds": basetypes.NumberType{},
		"multiplier":           basetypes.NumberType{},
		"randomization_factor": basetypes.NumberType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"error_message_regex":  errorMessageRegexVal,
			"interval_seconds":     v.IntervalSeconds,
			"max_interval_seconds": v.MaxIntervalSeconds,
			"multiplier":           v.Multiplier,
			"randomization_factor": v.RandomizationFactor,
		})

	return objVal, diags
}

func (v RetryableErrorsValue) Equal(o attr.Value) bool {
	other, ok := o.(RetryableErrorsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ErrorMessageRegex.Equal(other.ErrorMessageRegex) {
		return false
	}

	if !v.IntervalSeconds.Equal(other.IntervalSeconds) {
		return false
	}

	if !v.MaxIntervalSeconds.Equal(other.MaxIntervalSeconds) {
		return false
	}

	if !v.Multiplier.Equal(other.Multiplier) {
		return false
	}

	if !v.RandomizationFactor.Equal(other.RandomizationFactor) {
		return false
	}

	return true
}

func (v RetryableErrorsValue) Type(ctx context.Context) attr.Type {
	return RetryableErrorsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RetryableErrorsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"error_message_regex": basetypes.ListType{
			ElemType: types.StringType,
		},
		"interval_seconds":     basetypes.NumberType{},
		"max_interval_seconds": basetypes.NumberType{},
		"multiplier":           basetypes.NumberType{},
		"randomization_factor": basetypes.NumberType{},
	}
}
