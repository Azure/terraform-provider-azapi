# This template will generate a list of jobs that will run. The
# jobs created will correspond to the cross product of the
# vmImages and goVersions specified by the parameters.

parameters:
  goVersions: []
  vmImages: []
  maxParallel: 1

jobs:
  - job: build
    timeoutInMinutes: 300
    displayName: "Build: "

    # Build on each combination of supported OS and Go version
    strategy:
      maxParallel: ${{ parameters.maxParallel }}
      matrix:
        ${{ each goVersion in parameters.goVersions }}:
          ${{ each vmImage in parameters.vmImages }}:
            OS_${{ vmImage.ymlSafeName }}_GO_${{ goVersion.ymlSafeName }}:
              vmImage: ${{ vmImage.value }}
              goVersion: ${{ goVersion.value }}

    pool:
      name: pool-ubuntu-2004

    steps:
      - task: GoTool@0
        displayName: "Install correct version of Go"
        inputs:
          version: $(goVersion)
          GOPATH: "$(Pipeline.Workspace)/gopath"
          GOBIN: "$(GOPATH)/bin"

      - bash: |
          #!/usr/bin/env bash
          cd "$BUILD_SOURCESDIRECTORY"
          make tools
        displayName: "Install Dependencies"
      - bash: |
          #!/usr/bin/env bash
          cd "$BUILD_SOURCESDIRECTORY"
          make depscheck
        displayName: "Verify Vendor Dependencies"
      - bash: |
          #!/usr/bin/env bash
          cd "$BUILD_SOURCESDIRECTORY"
          make fmtcheck
        displayName: "Run Format Check"
      - bash: |
          #!/usr/bin/env bash
          cd "$BUILD_SOURCESDIRECTORY"
          make lint
        displayName: "Run Lint Check"
      - ${{ if eq(parameters.unitTest, true) }}:
          - bash: |
              #!/usr/bin/env bash
              go version
              cd "$BUILD_SOURCESDIRECTORY"
              make test
            displayName: "Run Unit Tests"
      - ${{ if eq(parameters.accTest, true) }}:
          - bash: |
              #!/usr/bin/env bash
              cd "$BUILD_SOURCESDIRECTORY"
              make testacc
            displayName: "Run All Tests"
            env:
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_TEST_LOCATION: $(ARM_TEST_LOCATION)
              ARM_TEST_LOCATION_ALT: $(ARM_TEST_LOCATION_ALT)
              ARM_TEST_LOCATION_ALT2: $(ARM_TEST_LOCATION_ALT2)
              ARM_TEST_EXAMPLES: $(ARM_TEST_EXAMPLES)
              TESTARGS: $(TESTARGS)
